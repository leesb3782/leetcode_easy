// 350. Intersection of Two Arrays II
// https://leetcode.com/problems/intersection-of-two-arrays-ii
int compare(const void* a, const void *b)
{
    int l = *((int*)a);
    int r = *((int*)b);

    if (l == r){
        return 0;
    }

    return l < r ? -1 : 1;
}

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {
    int *temp_result, *result;
    int temp_returnSize = 0;
    int i,j,k;
    temp_returnSize = nums1Size < nums2Size ? nums1Size : nums2Size;
    temp_result = (int *)malloc(temp_returnSize*sizeof(int));
    
    if(nums1Size == 0 || nums2Size == 0) {
        (*returnSize) = 0;
        return NULL;
    }
    
    qsort(nums1, nums1Size, sizeof(int), compare);
    qsort(nums2, nums2Size, sizeof(int), compare);
    
    (*returnSize)=0;
    i=j=k=0;
    while(i<nums1Size&&j<nums2Size) {
        //printf("i %d j %d\n", i, j);
        if(nums1[i] == nums2[j]) {
            temp_result[k] = nums1[i];
            k++;
            i++;
            j++;
        } else if(nums1[i] > nums2[j]) {
	// i 不動 j 要往後移
            while(j<nums2Size-1) {
                if(nums2[j]==nums2[j+1])
                    j++;
                else
                    break;
            }
            j++;
        } else { // nums1[i] < nums2[j]
	// i 要往後移 j 不動
            while(i<nums1Size-1) {
                if(nums1[i]==nums1[i+1])
                    i++;
                else
                    break;
            }
            i++;
        }
    }
    
    result = (int *)malloc(k*sizeof(int));
    memcpy(result, temp_result, k*sizeof(int));
    free(temp_result);
    *returnSize = k;
    return result;
}
