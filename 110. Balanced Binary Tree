// 110. Balanced Binary Tree
// https://leetcode.com/problems/balanced-binary-tree
bool BinaryTreeTravel(struct TreeNode* node, int *depth, int level) {
    if(node == NULL) {
        *depth = 0;
        return true;
    }
    int left_depth, right_depth;
    
    if(BinaryTreeTravel(node->left, &left_depth, level+1) == false)
        return false;
    if(BinaryTreeTravel(node->right, &right_depth, level+1) == false)
        return false;
    
    //printf("left_depth %d right_depth  %d\n", left_depth, right_depth );
    if(left_depth - right_depth > 1 || left_depth - right_depth < -1)
        return false;
    
    *depth = left_depth > right_depth ? left_depth + 1 : right_depth + 1;
    //printf("node->val %d depth %d\n", node->val, *depth);
    return true;
}

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool isBalanced(struct TreeNode* root) {
    int depth;
    return BinaryTreeTravel(root, &depth, 0);
}
